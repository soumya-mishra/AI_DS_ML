## Data Preparation for LSTM 
This is sourced from Machinelearning Mastery
-----------
Before a univariate series can be modeled, it must be prepared.

The LSTM model will learn a function that maps a sequence of past observations as 
input to an output observation. As such, the sequence of observations must be transformed
into multiple examples from which the LSTM can learn.

### Consider a given univariate sequence:

[10, 20, 30, 40, 50, 60, 70, 80, 90]

We can divide the sequence into multiple input/output patterns called samples,
where three time steps are used as input and one time step is used as output for the one-step prediction that is being learned.

X,			y
10, 20, 30 -->		40
20, 30, 40 -->		50
30, 40, 50 -->		60

The split_sequence() function below implements this behavior and will split a given univariate sequence
into multiple samples where each sample has a specified number of time steps and the output is a single time step.

# split a univariate sequence into samples

def split_sequence(sequence, n_steps):
	X, y = list(), list()
	for i in range(len(sequence)):
		# find the end of this pattern
		end_ix = i + n_steps
		# check if we are beyond the sequence
		if end_ix > len(sequence)-1:
			break
		# gather input and output parts of the pattern
		seq_x, seq_y = sequence[i:end_ix], sequence[end_ix]
		X.append(seq_x)
		y.append(seq_y)
	return array(X), array(y)


We can demonstrate this function on our small contrived dataset above.

The complete example is listed below.

** fine input sequence **
raw_seq = [10, 20, 30, 40, 50, 60, 70, 80, 90]
** Choose a number of time steps
n_steps = 3
** split into samples
X, y = split_sequence(raw_seq, n_steps)
** summarize the data
for i in range(len(X)):
	print(X[i], y[i])


Running the example splits the univariate series into six samples where each sample has
three input time steps and one output time step.

[10 20 30] 40
[20 30 40] 50
[30 40 50] 60
[40 50 60] 70
[50 60 70] 80
[60 70 80] 90

Now that we know how to prepare a univariate series for modeling, 
letâ€™s look at developing LSTM models that can learn the mapping of inputs to outputs, starting with a Vanilla LSTM.
---------------------------
## Prepare the Shape of data for LSTM :-

There is also confusion about how to convert your sequence data that may be a 1D or 2D matrix of numbers to 
the required 3D format of the LSTM input layer.
